======================================================start date : 06Sep2024======
This is the help file for docker for future reference
======================================================
rm -rf docker : delete all folder and file 
Current status : session-5, 
-------
-create ubuntu ec2 instance i did 22
-https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository
-service docker status
-sudo docker run hello-world

below 3 command to run docker command without sudo 
-sudo usermod -aG docker ${USER}
-sudo chown -R root:docker /var/run/docker
-restart terminal

----docker command:-----
-docker images (show list of images)
-docker images -a
-docker images -q
-docker run image (download image and run it)
-docker history hello-world (show layer of image)
-docker pull image (download image)
-docker search hello-world (search image on docker hub)
-docker rmi imageId(remove image, use -f for forcefully)
-docker run -d -P imageName:tag (run the image and by -P create port dynamically )
-docker image prune -a (remove all image which have not having running container)
-docker system prune -a (remove all unused resource)

-docker ps     (show running container)
-docker ps -a  (show all container )
-docker rm containId (delete container)
-docker rm -f containId (deleting forcefully container)
-docker rm $(docker ps -aq) (remove all container)
-docker ps -aq(list container id)
-docker tag imageId imageName:tag (add name and tag to image)
-docker build -t myhi:v1.0 . (build image with image name myHi and version v1.0)
-docker logs containerId (to see the log)


-docker run -d container (run container run detached mode)
-docker run -it containerId (to enter container, interactive mode)
-ctr pq (come out for guest os like ubuntu)
-docker commit containerId imageName(to create and commit image )[one way of creating image ]
-docker exec -it containerId /bin/bash (to inter in container)
-ctr+p+q : to come out from contaner

setup ubuntu in docker
-docker run -it ubuntu:20.04
-apt-get update
-apt-get install vim (install vim)
-docker commit ef2e9486b5e2 myubuntu1 (creating image from existing container)
-docker run -it imageName:tag
-apt-get install openjdk-8-jdk (install jdk)
-docker commit 2f2b17be1241 myjdk:v8 (creating image)

building docker file (in session - 5)
1) create helloapp folder and create Dockerfile in this with below lines
FROM ubuntu:20.04
LABEL maintainer sri@jlcindia.com
RUN apt-get -y update
RUN apt-get -y install openjdk-8-jdk wget
RUN mkdir /home/myjlc
COPY Hello.java /home/myjlc
WORKDIR /home/myjlc
RUN javac Hello.java
CMD ["java", "Hello"]
2) ceate Hello.java
3) docker build . (build image without name and tag)

Example: docker file using base image openjdk
FROM openjdk:8
LABEL maintainer sri@jlcindia.com
RUN mkdir /home/myjlc
COPY Hi.java /home/myjlc
WORKDIR /home/myjlc
RUN javac Hi.java
CMD ["java", "Hi"]

Example: docker file using base image tomcat
FROM ubuntu:20.04
LABEL maintainer sri@jlcindia.com
RUN apt-get -y update
RUN apt-get -y install openjdk-8-jdk wget
RUN wget https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.55/bin/apache-tomcat-8.5.55.tar.gz -O /tmp/tomcat.tar.gz
RUN cd /tmp && tar xvfz tomcat.tar.gz
RUN mv /tmp/apache-tomcat-8.5.55 /opt/tomcat
EXPOSE 8080
CMD /opt/tomcat/bin/catalina.sh run

- docker build -t mytom:v1.0 .(create image with name mytom and tag v1.0)

----------session - 6-----------------10sep---
-port no mapping is require because may be 2 tomcat in docker running on same port
-every docker have their private ip which host know
-docker run -d -p hostpost:dockerPort imageName:tag (now you can access app by hostPort)
-Example : docker run -d -p 8080:8080 mytom:v1.0

----------session - 7-----------------10sep---
-creating docker image using above created tomcat image
-create Dockerfile with below entry
FROM mytom:v1.0
COPY index.jsp /opt/tomcat/webapps/ROOT
-create index.jsp
-docker run -d -p 88:8080 myapp:v1.0
-test at 88 port, data display as index.jsp

Spring boot start at : 53min------------
Dockerfile for spring boot app:
FROM openjdk:11
ADD demo/target/demo-0.0.1-SNAPSHOT.jar demo-0.0.2-SNAPSHOT.jar
EXPOSE 12345
ENTRYPOINT ["java","-jar","demo-0.0.2-SNAPSHOT.jar"]

docker build -t springapp:v2.0 . (build docker image)
docker run -p 88:8080 springapp:v2.0 (run docker image)
Note : if you update code in spring app and build it, then you again need to create image to reflect changes








 